#pragma subsystem(WINDOWS_GUI)

var crc32_table = \ =>
{
	var ret = new uint[256];
	for (uint i = 0; i < 256; i++)
	{
		var crc = i;
		for (int j = 0; j < 8; j++)
		{
			var crc2 = crc >> 1;
			if ((crc & 1) == 0)
				crc = crc2;
			else
				crc = crc2 ^ 0xedb88320;
		}
		ret[i] = crc;
	}
	return ret;
}();

function getCrc32(buf : byte[])
{
	uint crc = ~0;
	for (int i = 0; i < buf.Length; i++)
	{
		var b = buf[i];
		crc = (crc >> 8) ^ crc32_table[(crc ^ b) & 0xff];
	}
	return ~crc;
}

class ZipHeader
{
	short version, flags, compression, dos_time, dos_date;
	uint crc32, compressed_size, uncompressed_size;
	short filename_length, extra_field_length;
	var _fname : byte[];
	uint _attrs, _pos;

	function Init(path : string, rel : string, data : byte[], pos : uint)
	{
		var ft = File.GetLastWriteTime(path);
		uint dd, dt;
		FileTimeToDosDateTime(ft, addrof dd, addrof dt);
		uint crc = 0, size = 0;
		if (data != null)
		{
			crc = getCrc32(data);
			size = data.Length;
		}
		var fn = rel.ToByteString();
		version            = 10;
		flags              = 0;
		compression        = 0;
		dos_time           = dt;
		dos_date           = dd;
		crc32              = crc;
		compressed_size    = size;
		uncompressed_size  = size;
		filename_length    = fn.Length;
		extra_field_length = 0;
		_fname             = fn;
		_attrs             = GetFileAttributes(path);
		_pos               = pos;
	}

	function Write(fs:FileStream)
	{
		fs.writeShort(version);
		fs.writeShort(flags);
		fs.writeShort(compression);
		fs.writeShort(dos_time);
		fs.writeShort(dos_date);
		fs.writeUInt(crc32);
		fs.writeUInt(compressed_size);
		fs.writeUInt(uncompressed_size);
		fs.writeShort(filename_length);
		fs.writeShort(extra_field_length);
	}
}

class ZipDirHeader
{
	ushort version;
	var header : ZipHeader;
	short _1; // file comment length
	short _2; // disk number start
	short _3; // internal file attributes
	uint attrs, pos;
	var fname : byte[];
	
	function Init(path : string, rel : string, data : byte[], pos : uint)
	{
		var relb = rel.ToByteString();
		version = 20;
		header  = new ZipHeader;
		header.Init(path, rel, data, pos);
		_1      = 0;
		_2      = 0;
		_3      = 0;
		attrs   = GetFileAttributes(path);
		pos     = pos;
		fname   = relb;
	}
	
	function Write(fs:FileStream)
	{
		fs.writeShort(version);
		header.Write(fs);
		fs.writeShort(_1);
		fs.writeShort(_2);
		fs.writeShort(_3);
		fs.writeUInt(attrs);
		fs.writeUInt(pos);
		fs.Write(fname);
	}
}

function mkrel(reldir : string, name : string)
{
	if (reldir == "") return name;
	return reldir + "/" + name;
}

function writeFile(list : ArrayList, fs : FileStream, path : string, rel : string)
{
	var fs2 = new FileStream;
	fs2.OpenRead(path);
	uint len = fs2.Length;
	var data = fs2.ReadToEnd();
	fs2.Close();
	
	uint p = fs.Position;
	var ziph = new ZipDirHeader;
	ziph.Init(path, rel, data, p);
	fs.WriteByte('P');
	fs.WriteByte('K');
	fs.WriteByte(3);
	fs.WriteByte(4);
	ziph.header.Write(fs);
	fs.Write(ziph.fname);
	fs.Write(data);
	list.Add(ziph);
}

function writeDir(list : ArrayList, fs : FileStream, path : string, rel : string)
{
	uint p = fs.Position;
	var ziph = new ZipDirHeader;
	ziph.Init(path, rel + "/", null, p);
	fs.WriteByte('P');
	fs.WriteByte('K');
	fs.WriteByte(3);
	fs.WriteByte(4);
	ziph.header.Write(fs);
	fs.Write(ziph.fname);
	list.Add(ziph);
	
	var files = Directory.GetFiles(path);
	for (int i = 0; i < files.Length; i++)
	{
		var f = files[i];
		writeFile(list, fs, f, mkrel(rel, Path.GetFileName(f)));
	}
	var dirs = Directory.GetDirectories(path);
	for (int i = 0; i < dirs.Length; i++)
	{
		var d = dirs[i];
		writeDir(list, fs, d, mkrel(rel, Path.GetFileName(d)));
	}
}

function write(list : ArrayList, fs : FileStream, path : string, rel : string)
{
	if (File.Exists(path))
		writeFile(list, fs, path, rel);
	else
		writeDir(list, fs, path, rel);
}

function writeZip(fs : FileStream, files : string[])
{
	var list = new ArrayList;
	
	for (int i = 0; i < files.Length; i++)
	{
		var f = files[i];
		write(list, fs, f, Path.GetFileName(f));
	}
	
	uint dir_start = fs.Position;
	for (int i = 0; i < list.Count; i++)
	{
		var ziph = list.Get(i) as ZipDirHeader;
		fs.WriteByte('P');
		fs.WriteByte('K');
		fs.WriteByte(1);
		fs.WriteByte(2);
		ziph.Write(fs);
	}
	uint dir_len = fs.Position - dir_start;
	
	fs.WriteByte('P');
	fs.WriteByte('K');
	fs.WriteByte(5);
	fs.WriteByte(6);
	fs.writeShort(0); // number of this disk
	fs.writeShort(0); // number of the disk with the start of the central directory
	fs.writeShort(list.Count);
	fs.writeShort(list.Count);
	fs.writeUInt(dir_len);
	fs.writeUInt(dir_start);
	fs.writeShort(0); // zipfile comment length
}

class Form1 : Form
{
	function ctor
	{
		Text = "ZIP";
		SetClientSize(256, 256);
	}
	
	override Create
	{
		base.Create();
		DragAcceptFiles(hWnd, true);
	}
	
	override WndProc(uMsg, wParam, lParam)
	{
		if (uMsg == WM_DROPFILES)
		{
			var files = GetDropFiles(wParam);
			var zip = Path.ChangeExtension(files[0], ".zip");
			var fs = new FileStream;
			fs.OpenWrite(zip);
			writeZip(fs, files);
			fs.Close();
		}
		return base.WndProc(uMsg, wParam, lParam);
	}
}

Application.Run(new Form1);
