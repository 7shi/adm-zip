const int FILE_ATTRIBUTE_DIRECTORY   = 0x00000010;
const int FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;

extern "shell32.dll"
{
	__stdcall __widecharset DragQueryFile(hDrop, iFile, lpszFile, cch);
	__stdcall DragAcceptFiles(hWnd, fAccept : bool);
}

extern "kernel32.dll"
{
	__stdcall GetFileTime(hFile, lpCreationTime : FILETIME, lpLastAccessTime : FILETIME, lpLastWriteTime : FILETIME) : bool;
	__stdcall FileTimeToLocalFileTime(lpFileTime : FILETIME, lpLocalFileTime : FILETIME) : bool;
	__stdcall FileTimeToDosDateTime(lpFileTime : FILETIME, lpFatDate, lpFatTime) : bool;
	__stdcall FileTimeToSystemTime(lpFileTime : FILETIME, lpSystemTime : SYSTEMTIME) : bool;
	__stdcall __widecharset GetFileAttributes(lpFileName : string);
}

function GetDropFiles(hDrop)
{
	var len = DragQueryFile(hDrop, -1, null, 0);
	var files = new string[len];
	var buf = new char[512];
	for (int i = 0; i < len; i++)
	{
		DragQueryFile(hDrop, i, buf, buf.Length);
		files[i] = string.FromCharArray(buf, -1);
	}
	return files;
}

class File
{
	static function GetLastWriteTime(path : string)
	{
		var handle = CreateFile(path, GENERIC_READ,
			FILE_SHARE_READ | FILE_SHARE_WRITE, null,
			OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, null);
		var ft = new FILETIME;
		if (handle != INVALID_HANDLE_VALUE)
		{
			GetFileTime(handle, null, null, ft);
			CloseHandle(handle);
		}
		var ret = new FILETIME;
		FileTimeToLocalFileTime(ft, ret);
		return ret;
	}
	
	static function Exists(path : string)
	{
		var attrs = GetFileAttributes(path);
		return attrs != -1 && (attrs & FILE_ATTRIBUTE_DIRECTORY) == 0;
	}
}

class Directory
{
	static function Exists(path : string)
	{
		var attrs = GetFileAttributes(path);
		return attrs != -1 && (attrs & FILE_ATTRIBUTE_DIRECTORY) != 0;
	}
}

class FILETIME
{
	uint dwLowDateTime;
	uint dwHighDateTime;
	
	function ToString
	{
		var st = new SYSTEMTIME;
		FileTimeToSystemTime(this, st);
		return string.Format("%d/%02d/%02d %02d:%02d:%02d",
			st.wYear, st.wMonth, st.wDay,
			st.wHour, st.wMinute, st.wSecond);
	}
}

class SYSTEMTIME
{
	ushort wYear;
	ushort wMonth;
	ushort wDayOfWeek;
	ushort wDay;
	ushort wHour;
	ushort wMinute;
	ushort wSecond;
	ushort wMilliseconds;
}
